# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is GOTT Build Scripts.
#
# The Initial Developer of the Original Code is
# Aristid Breitkreuz (aribrei@arcor.de).
# Portions created by the Initial Developer are Copyright (C) 2005-2006
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#  Aristid Breitkreuz (aribrei@arcor.de)
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

import os

cppdef = Split(ARGUMENTS.get('def', ''))
cxx = Environment()['CXX']
if os.environ.has_key('CXX'):
	cxx = os.environ['CXX']
cxx = ARGUMENTS.get('cxx', cxx)
cflags = Split(ARGUMENTS.get('cflags', Environment()['CXXFLAGS']))
release = int(ARGUMENTS.get('release', 0))
if release:
	debug = 0
	optimize = 'full'
	debug = -1
else:
	debug = 1
	optimize = 'none'

debug = int(ARGUMENTS.get('debug', debug))

if debug == 1:
	cppdef += ['DEBUG']
elif debug == -1:
	cppdef += ['NDEBUG']

optimize = ARGUMENTS.get('optimize', optimize)

caux = ARGUMENTS.get('aux')
cflags += Split(caux)

cflagsoverride = ARGUMENTS.get('cfoverride', 0)
if cflagsoverride:
	cflags = cflagsoverride

env = Environment(
  ENV = os.environ, # FIXME: security hole?
  CXX = cxx, 
  CCFLAGS = cflags, 
  CPPPATH=['#/..'], 
  LIBPATH=Split('#/tdl #/xany #/string #/plugin #/events #/configuration #/ui #/ui/x11 #/graphics #/notify_fs #/syswrap'),
  LINKFLAGS=['-Wl,--as-needed'],
  CPPDEFINES=cppdef)

Export('env')
Export('optimize')
Export('debug')

conf = SConscript('buildconf/SConscript')
env = conf.Finish()

shrd = env.Copy()
shrd.Append(CPPDEFINES = 'BUILDING_DLL')

Export('shrd')

SConscript(dirs = [
'.', 
'syswrap',
'configuration',
'plugin',
'events',
#'ui', 
'graphics', 
'notify_fs',
'tools/autobuild']
)
