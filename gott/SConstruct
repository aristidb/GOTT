cppdef = Split(ARGUMENTS.get('def', ''))
cxx = ARGUMENTS.get('cxx', Environment()['CXX'])
cflags = Split(ARGUMENTS.get('cflags', ''))
release = int(ARGUMENTS.get('release', 1))
if release:
	debug = 0
	optimize = 'full'
	debug = -1
else:
	debug = 1
	optimize = 'none'

debug = int(ARGUMENTS.get('debug', debug))

if debug == 1:
	cppdef = ['DEBUG']
elif debug == -1:
	cppdef = ['NDEBUG']

optimize = ARGUMENTS.get('optimize', optimize)

caux = ARGUMENTS.get('aux')
cflags += Split(caux)

cflagsoverride = ARGUMENTS.get('cfoverride', 0)
if cflagsoverride:
	cflags = cflagsoverride

env = Environment(
  CXX = cxx, 
  CCFLAGS = cflags, 
  CPPPATH=['#/..', '#/contrib/ntl'], 
  LIBPATH=Split('#/contrib/ntl #/util/tdl #/util/xany #/util/atom #/util/string #/base/plugin'),
  CPPDEFINES=cppdef)

Export('env')
Export('optimize')
Export('debug')

conf = SConscript('configure/SConscript')
env = conf.Finish()

shrd = env.Copy()
shrd.Append(CPPDEFINES = 'BUILDING_DLL')

Export('shrd')

SConscript(dirs = ['util', 'base',
		   'tools/autobuild', 'contrib/ntl'])
