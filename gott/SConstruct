import os

cppdef = Split(ARGUMENTS.get('def', ''))
cxx = Environment()['CXX']
if os.environ.has_key('CXX'):
	cxx = os.environ['CXX']
cxx = ARGUMENTS.get('cxx', cxx)
cflags = Split(ARGUMENTS.get('cflags', Environment()['CXXFLAGS']))
release = int(ARGUMENTS.get('release', 1))
if release:
	debug = 0
	optimize = 'full'
	debug = -1
else:
	debug = 1
	optimize = 'none'

debug = int(ARGUMENTS.get('debug', debug))

if debug == 1:
	cppdef += ['DEBUG']
elif debug == -1:
	cppdef += ['NDEBUG']

optimize = ARGUMENTS.get('optimize', optimize)

caux = ARGUMENTS.get('aux')
cflags += Split(caux)

cflagsoverride = ARGUMENTS.get('cfoverride', 0)
if cflagsoverride:
	cflags = cflagsoverride

env = Environment(
  ENV = os.environ, # FIXME: security hole?
  CXX = cxx, 
  CCFLAGS = cflags, 
  CPPPATH=['#/..'], 
  LIBPATH=Split('#/tdl #/xany #/string #/plugin #/events #/configuration #/ui #/ui/x11 #/graphics #/notify_fs'),
  CPPDEFINES=cppdef)

Export('env')
Export('optimize')
Export('debug')

conf = SConscript('buildconf/SConscript')
env = conf.Finish()

shrd = env.Copy()
shrd.Append(CPPDEFINES = 'BUILDING_DLL')

Export('shrd')

SConscript(dirs = [
'.', 
'syswrap',
'configuration',
'plugin',
'events',
#'ui', 
'graphics', 
'notify_fs',
'tools/autobuild']
)
