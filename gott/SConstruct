# vim:ts=4:sw=4:noexpandtab:filetype=python:
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is GOTT Build Scripts.
#
# The Initial Developer of the Original Code is
# Aristid Breitkreuz (aribrei@arcor.de).
# Portions created by the Initial Developer are Copyright (C) 2005-2006
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#  Aristid Breitkreuz (aribrei@arcor.de)
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

import os
import sys
import buildconf.Glob

platform = ARGUMENTS.get('OS', str(Platform()))
platform2 = sys.platform

sysfiles = ['sys.py', 'sys-' + platform2 + '.py', 'sys-' + platform + '.py']
if platform == platform2:
  del sysfiles[2]
sysfile = 'none'

for i in sysfiles:
  if os.path.isfile(i):
    sysfile = i
    break

if sysfile == 'none':
  print 'Please ensure that either', ' or '.join(sysfiles), 'exists.'
  print 'Alternatively, you can provide OS=<foo>, so that sys-<foo>.py exists.'
  Exit(1)

print 'Using system configuration from', sysfile
  
if not os.path.isfile('options.py'):
  print 'Warning: You do not have a options.py file, using defaults or command-line values.'
  print 'Type scons -Q -h for help with the options.'

opts = Options([sysfile, 'options.py'])
opts.Add(BoolOption('RELEASE', 'Release build', 1))
opts.Add(BoolOption('DEBUG', 'Improve debugging (overrides HIDE_SYMBOLS)', 0))
opts.Add(BoolOption('DEBUG_BUILD_CMD', 'Whether to showthe complete build commands', 1))
opts.Add(EnumOption('OPTIMIZATION', 'Optimization level', 'default', 
                    allowed_values=('default', 'none', 'some', 'full')))
opts.Add(BoolOption('HIDE_SYMBOLS', 'Hide unused symbols', 1))

opts.Add('BUILD_TO',"Set the build target path",".")

opts.Add(PathOption('BOOST_INCLUDE', 'Include directory of boost', '/usr/include'))
opts.Add(PathOption('BOOST_LIB', 'Library directory of boost', '/usr/lib'))
opts.Add('BOOST_LIBSUFFIX', 'Library suffix of boost', '')

opts.Add(BoolOption('SYS_KQUEUE', 'Whether to use kqueue(2)', 0))
opts.Add(BoolOption('SYS_INOTIFY', 'Whether to use inotify', 0))
opts.Add(BoolOption('SYS_EPOLL', 'Whether to use epoll(4)', 0))

libdirs_pre = open('libdirs.txt').readlines()

env = Environment(
  options = opts,
  ENV = os.environ, # FIXME: security hole?
  CPPDEFINES = [('BOOST_PARAMETER_MAX_ARITY', 8)],
  CCFLAGS = [],
  SHCCFLAGS = ['-DBUILDING_DLL'],
  CPPPATH=['#/..', '${BOOST_INCLUDE}'], 
  LIBPATH=['#/$BUILD_TO/', '$BUILD_TO/',  '${BOOST_LIB}'],
  LDMODULEPREFIX="",
  LDMODULESUFFIX=".plugin",
  LDMODULECOM="$SHLINK -o $TARGET $SHLINKFLAGS  $SOURCES",
  )
env.Help(opts.GenerateHelpText(env))

if env['RELEASE'] == 1:
  env.Append(CPPDEFINES = ['NDEBUG'])
else:
  env.Append(CPPDEFINES = ['DEBUG'])

if env['DEBUG'] == 1:
  if env['OPTIMIZATION'] == 'default':
    env['OPTIMIZATION'] = 'none'
else:
  if env['OPTIMIZATION'] == 'default':
    env['OPTIMIZATION'] = 'full'

Export('env')

conf = SConscript('buildconf/SConscript')
env = conf.Finish()

dirs = [
'.',
'thread',
'tools/autobuild',
'debug',
'syswrap',
'string',
'xany',
'plugin',
'tdl',
'configuration',
'events',
'graphics',
'notify_fs',
'properties',
#'ui',
'examples',
'tests',
]

metadata = [
#'./plugin/testregistry.tdl',
'plugin_registry.tdl',
'module_registry.tdl',
'deduced_features.tdl',
'setup_libpath.sh',
]

if env['BUILD_TO']=='.':
	for x in dirs:
		SConscript(dirs = x)
else:
	env.Install( dir="$BUILD_TO", source=metadata)
	for x in dirs:
		SConscript(dirs = x,build_dir= env['BUILD_TO'] + "/" + x,duplicate=0)
