# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is GOTT Build Scripts.
#
# The Initial Developer of the Original Code is
# Aristid Breitkreuz (aribrei@arcor.de).
# Portions created by the Initial Developer are Copyright (C) 2005-2006
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#  Aristid Breitkreuz (aribrei@arcor.de)
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

def CheckCompilerVisibility(context):
	context.Message('Checking if compiler supports visibility attributes... ')
	lastCPPDEF = context.env['CPPDEFINES'][:]
	lastCCFLAGS = context.env['CCFLAGS'][:]
	
	context.env.Append(CPPDEFINES = 'HAVE_VISIBILITY')
	context.env.Append(CCFLAGS = '-fvisibility=hidden')

	result = context.TryCompile("int global __attribute__((visibility(\"default\")));\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
		context.env.Replace(CPPDEFINES = lastCPPDEF)
	context.Result(result)
	return result

def CheckWarnings(context):
	context.Message('Checking if compiler supports gcc-style warnings... ')
	lastCCFLAGS = context.env['CCFLAGS'][:]

	context.env.Append(CCFLAGS = Split('-Wall -W')) # stripped -Werror because of libsigc++'s hide

	result = context.TryCompile("int global;\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
	context.Result(result)
	return result

Import('optimize')

def CheckOptimization(context):
	context.Message('Checking if compiler supports gcc-style optimization levels... ')
	lastCCFLAGS = context.env['CCFLAGS'][:]

	if optimize == 'full':
		level = '-O3'
	elif optimize == 'some':
		level = '-O2'

	context.env.Append(CCFLAGS = level)
	result = context.TryLink("#ifdef __OPTIMIZE__\nint main() {}\n#endif\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
	context.Result(result)
	return result

def CheckDebug(context):
	context.Message('Checking if compiler supports gcc-style debug flags... ')
	lastCCFLAGS = context.env['CCFLAGS'][:]
	context.env.Append(CCFLAGS = ['-g'])
	result = context.TryCompile("void func() {}\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
	context.Result(result)
	return result

print 'Configuration...'
Import('env')
tests =	{
	'CompilerVisibility': CheckCompilerVisibility,
	'Warnings': CheckWarnings,
	'Optimization': CheckOptimization,
	'Debug': CheckDebug,
}
conf = Configure(env, custom_tests = tests)
if optimize != 'none':
	conf.Optimization()
conf.Warnings()
conf.CompilerVisibility()
Import('debug')
if debug == 1:
	conf.Debug()
if not conf.CheckCXXHeader('boost/config.hpp', '<>'):
	print 'Boost headers are not installed'
	Exit(1)
if not conf.CheckLib('boost_thread-mt', language = 'c++', autoadd = 0):
  if not conf.CheckLib('boost_thread', language = 'c++', autoadd = 0):
    print 'Boost threading library is not installed'
    Exit(1)
  else:
    boost_thread_lib = 'boost_thread'
else:
  boost_thread_lib = 'boost_thread-mt'

Export('boost_thread_lib')

if not conf.CheckLib('boost_date_time-mt', language = 'c++'):
  if not conf.CheckLib('boost_date_time', language = 'c++'):
    print 'Boost date_time library is not installed'
    Exit(1)
  else:
    boost_date_time_lib = 'boost_date_time'
else:
  boost_date_time_lib = 'boost_date_time'

Export('boost_date_time_lib')

if conf.CheckCHeader('unistd.h', '<>'):
	conf.env.Append(CPPDEFINES = 'HAS_UNISTD_H')

conf.env.ParseConfig('pkg-config --libs sigc++-2.0')
conf.env.ParseConfig('pkg-config --cflags sigc++-2.0')

Return('conf')
