# vim:ts=4:sw=4:noexpandtab:filetype=python:
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is GOTT Build Scripts.
#
# The Initial Developer of the Original Code is
# Aristid Breitkreuz (aribrei@arcor.de).
# Portions created by the Initial Developer are Copyright (C) 2005-2006
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#  Aristid Breitkreuz (aribrei@arcor.de)
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

import glob
import os
Import('env')

def rmv(list, prefix, element):
	if (prefix + "\\" + element) in list:
		list.remove(prefix + "\\" + element)
	else:
		list.remove(prefix + "/" + element)

libobj = env.Glob('string/*.cpp')
libobj += ['exceptions.cpp', 'xany/xany.cpp']

libobj_plugin = env.Glob('plugin/*.cpp')
rmv(libobj_plugin, 'plugin', 'test.cpp')
libobj += libobj_plugin

libobj_syswrap = env.Glob('syswrap/*.cpp')
if env['SYS_KQUEUE'] == 0:
	rmv(libobj_syswrap, 'syswrap', 'kqueue_bsd.cpp')
if env['SYS_EPOLL'] == 0:
	rmv(libobj_syswrap, 'syswrap', 'epoll_linux.cpp')
if env['SYS_INOTIFY'] == 0:
	rmv(libobj_syswrap, 'syswrap', 'inotify_linux.cpp')
rmv(libobj_syswrap, 'syswrap', 'test.cpp')
libobj += libobj_syswrap

tdl_source_files = []

tdl_dirs= [
'.',
'schema',
'schema_lang',
'parse',
'write',
'structure',
]
for x in tdl_dirs:
	tdl_source_files += env.Glob("tdl/" + x + '/*.cpp')

libobj += tdl_source_files

env2 = env.Copy()
env2.Append(LIBS = ['dl'])
env2.SharedLibrary('gott_core', libobj)
env = env.Copy()
env.Append(LIBS = ['gott_core'])

libobj_system = []

libobj_events = env.Glob('events/*.cpp')
rmv(libobj_events, 'events', 'mq_loop_test.cpp')
libobj_system += libobj_events

libobj_notify_fs = env.Glob('notify_fs/*.cpp')
rmv(libobj_notify_fs, 'notify_fs', 'test.cpp')
libobj_system += libobj_notify_fs

env.SharedLibrary('gott_system', libobj_system)
env = env.Copy()
env.Append(LIBS = ['gott_system'])

libobj_graphics = env.Glob('graphics/*.cpp')
env.SharedLibrary('gott_graphics', libobj_graphics)
env = env.Copy()
env.Append(LIBS = ['gott_graphics'])

Export('env')

env.Program('thunk_test', 'thunk.cpp')
