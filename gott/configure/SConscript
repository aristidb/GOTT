def CheckCompilerVisibility(context):
	context.Message('Checking if compiler supports visibility attributes... ')
	lastCPPDEF = context.env['CPPDEFINES'][:]
	lastCCFLAGS = context.env['CCFLAGS'][:]
	
	context.env.Append(CPPDEFINES = 'HAVE_VISIBILITY')
	context.env.Append(CCFLAGS = '-fvisibility=hidden')

	result = context.TryCompile("int global __attribute__((visibility(\"default\")));\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
		context.env.Replace(CPPDEFINES = lastCPPDEF)
	context.Result(result)
	return result

def CheckWarnings(context):
	context.Message('Checking if compiler supports gcc-style warnings... ')
	lastCCFLAGS = context.env['CCFLAGS'][:]

	context.env.Append(CCFLAGS = Split('-Wall -W -Werror'))

	result = context.TryCompile("int global;\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
	context.Result(result)
	return result

Import('optimize')

def CheckOptimization(context):
	context.Message('Checking if compiler supports gcc-style optimization levels... ')
	lastCCFLAGS = context.env['CCFLAGS'][:]

	if optimize == 'full':
		level = '-O3'

	context.env.Append(CCFLAGS = level)
	result = context.TryLink("#ifdef __OPTIMIZE__\nint main() {}\n#endif\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
	context.Result(result)
	return result

def CheckDebug(context):
	context.Message('Checking if compiler supports gcc-style debug flags... ')
	lastCCFLAGS = context.env['CCFLAGS'][:]
	context.env.Append(CCFLAGS = ['-g','-ggdb3'])
	result = context.TryCompile("void func() {}\n", '.cpp')
	if not result:
		context.env.Replace(CCFLAGS = lastCCFLAGS)
	context.Result(result)
	return result

print 'Configuration...'
Import('env')
tests =	{
	'CompilerVisibility': CheckCompilerVisibility,
	'Warnings': CheckWarnings,
	'Optimization': CheckOptimization,
	'Debug': CheckDebug
}
conf = Configure(env, custom_tests = tests)
if optimize != 'none':
	conf.Optimization()
conf.Warnings()
conf.CompilerVisibility()
Import('debug')
if debug == 1:
	conf.Debug()

Return('conf')
print 'Finished configuration'
