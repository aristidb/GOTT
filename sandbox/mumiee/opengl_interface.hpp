#ifndef GOTT_GUI_OPENGL_INTERFACE_HPP_INCLUDED
#define GOTT_GUI_OPENGL_INTERFACE_HPP_INCLUDED

#include <GL/gl.h>
#include <stddef.h>
namespace gott{namespace gui{


struct opengl_interface
{
  typedef int			GLhandle;
  typedef char		GLchar;
  typedef ptrdiff_t	GLintptr;
  typedef ptrdiff_t	GLsizeiptr;

  struct extension_interface
  {
    GLboolean (APIENTRY *IsRenderbuffer)(GLuint);
    void (APIENTRY *BindRenderbuffer)(GLenum, GLuint);
    void (APIENTRY *DeleteRenderbuffers)(GLsizei, const GLuint*);
    void (APIENTRY *GenRenderbuffers)(GLsizei, GLuint*);
    void (APIENTRY *RenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
    void (APIENTRY *GetRenderbufferParameteriv)(GLenum, GLenum, int*);
    GLboolean (APIENTRY *IsFramebuffer)(GLuint);
    void (APIENTRY *BindFramebuffer)(GLenum, GLuint);
    void (APIENTRY *DeleteFramebuffers)(GLsizei, const GLuint*);
    void (APIENTRY *GenFramebuffers)(GLsizei, GLuint*);
    GLenum (APIENTRY *CheckFramebufferStatus)(GLenum);
    void (APIENTRY *FramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (APIENTRY *FramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (APIENTRY *FramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (APIENTRY *FramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
    void (APIENTRY *GetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint*);
    void (APIENTRY *GenerateMipmap)(GLenum);
  };

  extension_interface ext; 


  void (APIENTRY *BlendColor)(GLclampf, GLclampf, GLclampf, GLclampf);
  void (APIENTRY *BlendEquation)(GLenum);
  void (APIENTRY *DrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const GLvoid*);
  void (APIENTRY *ColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid*);
  void (APIENTRY *ColorTableParameterfv)(GLenum, GLenum, const GLfloat*);
  void (APIENTRY *ColorTableParameteriv)(GLenum, GLenum, const GLint*);
  void (APIENTRY *CopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
  void (APIENTRY *GetColorTable)(GLenum, GLenum, GLenum, GLvoid*);
  void (APIENTRY *GetColorTableParameterfv)(GLenum, GLenum, GLfloat*);
  void (APIENTRY *GetColorTableParameteriv)(GLenum, GLenum, GLint*);
  void (APIENTRY *ColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*);
  void (APIENTRY *CopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
  void (APIENTRY *ConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const GLvoid*);
  void (APIENTRY *ConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*);
  void (APIENTRY *ConvolutionParameterf)(GLenum, GLenum, GLfloat);
  void (APIENTRY *ConvolutionParameterfv)(GLenum, GLenum, const GLfloat*);
  void (APIENTRY *ConvolutionParameteri)(GLenum, GLenum, GLint);
  void (APIENTRY *ConvolutionParameteriv)(GLenum, GLenum, const GLint*);
  void (APIENTRY *CopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
  void (APIENTRY *CopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
  void (APIENTRY *GetConvolutionFilter)(GLenum, GLenum, GLenum, GLvoid*);
  void (APIENTRY *GetConvolutionParameterfv)(GLenum, GLenum, GLfloat*);
  void (APIENTRY *GetConvolutionParameteriv)(GLenum, GLenum, GLint*);
  void (APIENTRY *GetSeparableFilter)(GLenum, GLenum, GLenum, GLvoid*, GLvoid*, GLvoid*);
  void (APIENTRY *SeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*, const GLvoid*);
  void (APIENTRY *GetHistogram)(GLenum, GLboolean, GLenum, GLenum, GLvoid*);
  void (APIENTRY *GetHistogramParameterfv)(GLenum, GLenum, GLfloat*);
  void (APIENTRY *GetHistogramParameteriv)(GLenum, GLenum, GLint*);
  void (APIENTRY *GetMinmax)(GLenum, GLboolean, GLenum, GLenum, GLvoid*);
  void (APIENTRY *GetMinmaxParameterfv)(GLenum, GLenum, GLfloat*);
  void (APIENTRY *GetMinmaxParameteriv)(GLenum, GLenum, GLint*);
  void (APIENTRY *Histogram)(GLenum, GLsizei, GLenum, GLboolean);
  void (APIENTRY *Minmax)(GLenum, GLenum, GLboolean);
  void (APIENTRY *ResetHistogram)(GLenum);
  void (APIENTRY *ResetMinmax)(GLenum);
  void (APIENTRY *TexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid*);
  void (APIENTRY *TexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*);
  void (APIENTRY *CopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
  void (APIENTRY *ActiveTexture)(GLenum);
  void (APIENTRY *ClientActiveTexture)(GLenum);
  void (APIENTRY *MultiTexCoord1d)(GLenum, GLdouble);
  void (APIENTRY *MultiTexCoord1dv)(GLenum, const GLdouble*);
  void (APIENTRY *MultiTexCoord1f)(GLenum, GLfloat);
  void (APIENTRY *MultiTexCoord1fv)(GLenum, const GLfloat*);
  void (APIENTRY *MultiTexCoord1i)(GLenum, GLint);
  void (APIENTRY *MultiTexCoord1iv)(GLenum, const GLint*);
  void (APIENTRY *MultiTexCoord1s)(GLenum, GLshort);
  void (APIENTRY *MultiTexCoord1sv)(GLenum, const GLshort*);
  void (APIENTRY *MultiTexCoord2d)(GLenum, GLdouble, GLdouble);
  void (APIENTRY *MultiTexCoord2dv)(GLenum, const GLdouble*);
  void (APIENTRY *MultiTexCoord2f)(GLenum, GLfloat, GLfloat);
  void (APIENTRY *MultiTexCoord2fv)(GLenum, const GLfloat*);
  void (APIENTRY *MultiTexCoord2i)(GLenum, GLint, GLint);
  void (APIENTRY *MultiTexCoord2iv)(GLenum, const GLint*);
  void (APIENTRY *MultiTexCoord2s)(GLenum, GLshort, GLshort);
  void (APIENTRY *MultiTexCoord2sv)(GLenum, const GLshort*);
  void (APIENTRY *MultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *MultiTexCoord3dv)(GLenum, const GLdouble*);
  void (APIENTRY *MultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *MultiTexCoord3fv)(GLenum, const GLfloat*);
  void (APIENTRY *MultiTexCoord3i)(GLenum, GLint, GLint, GLint);
  void (APIENTRY *MultiTexCoord3iv)(GLenum, const GLint*);
  void (APIENTRY *MultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
  void (APIENTRY *MultiTexCoord3sv)(GLenum, const GLshort*);
  void (APIENTRY *MultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *MultiTexCoord4dv)(GLenum, const GLdouble*);
  void (APIENTRY *MultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *MultiTexCoord4fv)(GLenum, const GLfloat*);
  void (APIENTRY *MultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
  void (APIENTRY *MultiTexCoord4iv)(GLenum, const GLint*);
  void (APIENTRY *MultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
  void (APIENTRY *MultiTexCoord4sv)(GLenum, const GLshort*);
  void (APIENTRY *LoadTransposeMatrixf)(const GLfloat*);
  void (APIENTRY *LoadTransposeMatrixd)(const GLdouble*);
  void (APIENTRY *MultTransposeMatrixf)(const GLfloat*);
  void (APIENTRY *MultTransposeMatrixd)(const GLdouble*);
  void (APIENTRY *SampleCoverage)(GLclampf, GLboolean);
  void (APIENTRY *CompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const GLvoid*);
  void (APIENTRY *CompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const GLvoid*);
  void (APIENTRY *CompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const GLvoid*);
  void (APIENTRY *CompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid*);
  void (APIENTRY *CompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const GLvoid*);
  void (APIENTRY *CompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const GLvoid*);
  void (APIENTRY *GetCompressedTexImage)(GLenum, GLint, GLvoid*);
  void (APIENTRY *BlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
  void (APIENTRY *FogCoordf)(GLfloat);
  void (APIENTRY *FogCoordfv)(const GLfloat*);
  void (APIENTRY *FogCoordd)(GLdouble);
  void (APIENTRY *FogCoorddv)(const GLdouble*);
  void (APIENTRY *FogCoordPointer)(GLenum, GLsizei, const GLvoid*);
  void (APIENTRY *MultiDrawArrays)(GLenum, GLint*, GLsizei*, GLsizei);
  void (APIENTRY *MultiDrawElements)(GLenum, const GLsizei*, GLenum, const GLvoid**, GLsizei);
  void (APIENTRY *PointParameterf)(GLenum, GLfloat);
  void (APIENTRY *PointParameterfv)(GLenum, const GLfloat*);
  void (APIENTRY *PointParameteri)(GLenum, GLint);
  void (APIENTRY *PointParameteriv)(GLenum, const GLint*);
  void (APIENTRY *SecondaryColor3b)(GLbyte, GLbyte, GLbyte);
  void (APIENTRY *SecondaryColor3bv)(const GLbyte*);
  void (APIENTRY *SecondaryColor3d)(GLdouble, GLdouble, GLdouble);
  void (APIENTRY *SecondaryColor3dv)(const GLdouble*);
  void (APIENTRY *SecondaryColor3f)(GLfloat, GLfloat, GLfloat);
  void (APIENTRY *SecondaryColor3fv)(const GLfloat*);
  void (APIENTRY *SecondaryColor3i)(GLint, GLint, GLint);
  void (APIENTRY *SecondaryColor3iv)(const GLint*);
  void (APIENTRY *SecondaryColor3s)(GLshort, GLshort, GLshort);
  void (APIENTRY *SecondaryColor3sv)(const GLshort*);
  void (APIENTRY *SecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
  void (APIENTRY *SecondaryColor3ubv)(const GLubyte*);
  void (APIENTRY *SecondaryColor3ui)(GLuint, GLuint, GLuint);
  void (APIENTRY *SecondaryColor3uiv)(const GLuint*);
  void (APIENTRY *SecondaryColor3us)(GLushort, GLushort, GLushort);
  void (APIENTRY *SecondaryColor3usv)(const GLushort*);
  void (APIENTRY *SecondaryColorPointer)(GLint, GLenum, GLsizei, const GLvoid*);
  void (APIENTRY *WindowPos2d)(GLdouble, GLdouble);
  void (APIENTRY *WindowPos2dv)(const GLdouble*);
  void (APIENTRY *WindowPos2f)(GLfloat, GLfloat);
  void (APIENTRY *WindowPos2fv)(const GLfloat*);
  void (APIENTRY *WindowPos2i)(GLint, GLint);
  void (APIENTRY *WindowPos2iv)(const GLint*);
  void (APIENTRY *WindowPos2s)(GLshort, GLshort);
  void (APIENTRY *WindowPos2sv)(const GLshort*);
  void (APIENTRY *WindowPos3d)(GLdouble, GLdouble, GLdouble);
  void (APIENTRY *WindowPos3dv)(const GLdouble*);
  void (APIENTRY *WindowPos3f)(GLfloat, GLfloat, GLfloat);
  void (APIENTRY *WindowPos3fv)(const GLfloat*);
  void (APIENTRY *WindowPos3i)(GLint, GLint, GLint);
  void (APIENTRY *WindowPos3iv)(const GLint*);
  void (APIENTRY *WindowPos3s)(GLshort, GLshort, GLshort);
  void (APIENTRY *WindowPos3sv)(const GLshort*);
  void (APIENTRY *GenQueries)(GLsizei, GLuint*);
  void (APIENTRY *DeleteQueries)(GLsizei, const GLuint*);
  GLboolean (APIENTRY *IsQuery)(GLuint);
  void (APIENTRY *BeginQuery)(GLenum, GLuint);
  void (APIENTRY *EndQuery)(GLenum);
  void (APIENTRY *GetQueryiv)(GLenum, GLenum, GLint*);
  void (APIENTRY *GetQueryObjectiv)(GLuint, GLenum, GLint*);
  void (APIENTRY *GetQueryObjectuiv)(GLuint, GLenum, GLuint*);
  void (APIENTRY *BindBuffer)(GLenum, GLuint);
  void (APIENTRY *DeleteBuffers)(GLsizei, const GLuint*);
  void (APIENTRY *GenBuffers)(GLsizei, GLuint*);
  GLboolean (APIENTRY *IsBuffer)(GLuint);
  void (APIENTRY *BufferData)(GLenum, GLsizeiptr, const GLvoid*, GLenum);
  void (APIENTRY *BufferSubData)(GLenum, GLintptr, GLsizeiptr, const GLvoid*);
  void (APIENTRY *GetBufferSubData)(GLenum, GLintptr, GLsizeiptr, GLvoid*);
  GLvoid* (APIENTRY *MapBuffer)(GLenum, GLenum);
  GLboolean (APIENTRY *UnmapBuffer)(GLenum);
  void (APIENTRY *GetBufferParameteriv)(GLenum, GLenum, GLint*);
  void (APIENTRY *GetBufferPointerv)(GLenum, GLenum, GLvoid**);
  void (APIENTRY *BlendEquationSeparate)(GLenum, GLenum);
  void (APIENTRY *DrawBuffers)(GLsizei, const GLenum*);
  void (APIENTRY *StencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
  void (APIENTRY *StencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
  void (APIENTRY *StencilMaskSeparate)(GLenum, GLuint);
  void (APIENTRY *AttachShader)(GLuint, GLuint);
  void (APIENTRY *BindAttribLocation)(GLuint, GLuint, const GLchar*);
  void (APIENTRY *CompileShader)(GLuint);
  GLuint (APIENTRY *CreateProgram)(void);
  GLuint (APIENTRY *CreateShader)(GLenum);
  void (APIENTRY *DeleteProgram)(GLuint);
  void (APIENTRY *DeleteShader)(GLuint);
  void (APIENTRY *DetachShader)(GLuint, GLuint);
  void (APIENTRY *DisableVertexAttribArray)(GLuint);
  void (APIENTRY *EnableVertexAttribArray)(GLuint);
  void (APIENTRY *GetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
  void (APIENTRY *GetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*);
  void (APIENTRY *GetAttachedShaders)(GLuint, GLsizei, GLsizei*, GLuint*);
  GLint (APIENTRY *GetAttribLocation)(GLuint, const GLchar*);
  void (APIENTRY *GetProgramiv)(GLuint, GLenum, GLint*);
  void (APIENTRY *GetProgramInfoLog)(GLuint, GLsizei, GLsizei*, GLchar*);
  void (APIENTRY *GetShaderiv)(GLuint, GLenum, GLint*);
  void (APIENTRY *GetShaderInfoLog)(GLuint, GLsizei, GLsizei*, GLchar*);
  void (APIENTRY *GetShaderSource)(GLuint, GLsizei, GLsizei*, GLchar*);
  GLint (APIENTRY *GetUniformLocation)(GLuint, const GLchar*);
  void (APIENTRY *GetUniformfv)(GLuint, GLint, GLfloat*);
  void (APIENTRY *GetUniformiv)(GLuint, GLint, GLint*);
  void (APIENTRY *GetVertexAttribdv)(GLuint, GLenum, GLdouble*);
  void (APIENTRY *GetVertexAttribfv)(GLuint, GLenum, GLfloat*);
  void (APIENTRY *GetVertexAttribiv)(GLuint, GLenum, GLint*);
  void (APIENTRY *GetVertexAttribPointerv)(GLuint, GLenum, GLvoid**);
  GLboolean (APIENTRY *IsProgram)(GLuint);
  GLboolean (APIENTRY *IsShader)(GLuint);
  void (APIENTRY *LinkProgram)(GLuint);
  void (APIENTRY *ShaderSource)(GLuint, GLsizei, const GLchar**, const GLint*);
  void (APIENTRY *UseProgram)(GLuint);
  void (APIENTRY *Uniform1f)(GLint, GLfloat);
  void (APIENTRY *Uniform2f)(GLint, GLfloat, GLfloat);
  void (APIENTRY *Uniform3f)(GLint, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Uniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Uniform1i)(GLint, GLint);
  void (APIENTRY *Uniform2i)(GLint, GLint, GLint);
  void (APIENTRY *Uniform3i)(GLint, GLint, GLint, GLint);
  void (APIENTRY *Uniform4i)(GLint, GLint, GLint, GLint, GLint);
  void (APIENTRY *Uniform1fv)(GLint, GLsizei, const GLfloat*);
  void (APIENTRY *Uniform2fv)(GLint, GLsizei, const GLfloat*);
  void (APIENTRY *Uniform3fv)(GLint, GLsizei, const GLfloat*);
  void (APIENTRY *Uniform4fv)(GLint, GLsizei, const GLfloat*);
  void (APIENTRY *Uniform1iv)(GLint, GLsizei, const GLint*);
  void (APIENTRY *Uniform2iv)(GLint, GLsizei, const GLint*);
  void (APIENTRY *Uniform3iv)(GLint, GLsizei, const GLint*);
  void (APIENTRY *Uniform4iv)(GLint, GLsizei, const GLint*);
  void (APIENTRY *UniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat*);
  void (APIENTRY *UniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat*);
  void (APIENTRY *UniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat*);
  void (APIENTRY *ValidateProgram)(GLuint);
  void (APIENTRY *VertexAttrib1d)(GLuint, GLdouble);
  void (APIENTRY *VertexAttrib1dv)(GLuint, const GLdouble*);
  void (APIENTRY *VertexAttrib1f)(GLuint, GLfloat);
  void (APIENTRY *VertexAttrib1fv)(GLuint, const GLfloat*);
  void (APIENTRY *VertexAttrib1s)(GLuint, GLshort);
  void (APIENTRY *VertexAttrib1sv)(GLuint, const GLshort*);
  void (APIENTRY *VertexAttrib2d)(GLuint, GLdouble, GLdouble);
  void (APIENTRY *VertexAttrib2dv)(GLuint, const GLdouble*);
  void (APIENTRY *VertexAttrib2f)(GLuint, GLfloat, GLfloat);
  void (APIENTRY *VertexAttrib2fv)(GLuint, const GLfloat*);
  void (APIENTRY *VertexAttrib2s)(GLuint, GLshort, GLshort);
  void (APIENTRY *VertexAttrib2sv)(GLuint, const GLshort*);
  void (APIENTRY *VertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *VertexAttrib3dv)(GLuint, const GLdouble*);
  void (APIENTRY *VertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *VertexAttrib3fv)(GLuint, const GLfloat*);
  void (APIENTRY *VertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
  void (APIENTRY *VertexAttrib3sv)(GLuint, const GLshort*);
  void (APIENTRY *VertexAttrib4Nbv)(GLuint, const GLbyte*);
  void (APIENTRY *VertexAttrib4Niv)(GLuint, const GLint*);
  void (APIENTRY *VertexAttrib4Nsv)(GLuint, const GLshort*);
  void (APIENTRY *VertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
  void (APIENTRY *VertexAttrib4Nubv)(GLuint, const GLubyte*);
  void (APIENTRY *VertexAttrib4Nuiv)(GLuint, const GLuint*);
  void (APIENTRY *VertexAttrib4Nusv)(GLuint, const GLushort*);
  void (APIENTRY *VertexAttrib4bv)(GLuint, const GLbyte*);
  void (APIENTRY *VertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *VertexAttrib4dv)(GLuint, const GLdouble*);
  void (APIENTRY *VertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *VertexAttrib4fv)(GLuint, const GLfloat*);
  void (APIENTRY *VertexAttrib4iv)(GLuint, const GLint*);
  void (APIENTRY *VertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
  void (APIENTRY *VertexAttrib4sv)(GLuint, const GLshort*);
  void (APIENTRY *VertexAttrib4ubv)(GLuint, const GLubyte*);
  void (APIENTRY *VertexAttrib4uiv)(GLuint, const GLuint*);
  void (APIENTRY *VertexAttrib4usv)(GLuint, const GLushort*);
  void (APIENTRY *VertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid*);
  void (APIENTRY *ClearIndex)(GLfloat);
  void (APIENTRY *ClearColor)(GLclampf, GLclampf, GLclampf, GLclampf);
  void (APIENTRY *Clear)(GLbitfield);
  void (APIENTRY *IndexMask)(GLuint);
  void (APIENTRY *ColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
  void (APIENTRY *AlphaFunc)(GLenum, GLclampf);
  void (APIENTRY *BlendFunc)(GLenum, GLenum);
  void (APIENTRY *LogicOp)(GLenum);
  void (APIENTRY *CullFace)(GLenum);
  void (APIENTRY *FrontFace)(GLenum);
  void (APIENTRY *PointSize)(GLfloat);
  void (APIENTRY *LineWidth)(GLfloat);
  void (APIENTRY *LineStipple)(GLint, GLushort);
  void (APIENTRY *PolygonMode)(GLenum, GLenum);
  void (APIENTRY *PolygonOffset)(GLfloat, GLfloat);
  void (APIENTRY *PolygonStipple)(const GLubyte*);
  void (APIENTRY *GetPolygonStipple)(GLubyte*);
  void (APIENTRY *EdgeFlag)(GLboolean);
  void (APIENTRY *EdgeFlagv)(const GLboolean*);
  void (APIENTRY *Scissor)(GLint, GLint, GLsizei, GLsizei);
  void (APIENTRY *ClipPlane)(GLenum, const GLdouble*);
  void (APIENTRY *GetClipPlane)(GLenum, GLdouble*);
  void (APIENTRY *DrawBuffer)(GLenum);
  void (APIENTRY *ReadBuffer)(GLenum);
  void (APIENTRY *Enable)(GLenum);
  void (APIENTRY *Disable)(GLenum);
  GLboolean (APIENTRY *IsEnabled)(GLenum);
  void (APIENTRY *EnableClientState)(GLenum);
  void (APIENTRY *DisableClientState)(GLenum);
  void (APIENTRY *GetBooleanv)(GLenum, GLboolean*);
  void (APIENTRY *GetDoublev)(GLenum, GLdouble*);
  void (APIENTRY *GetFloatv)(GLenum, GLfloat*);
  void (APIENTRY *GetIntegerv)(GLenum, GLint*);
  void (APIENTRY *PushAttrib)(GLbitfield);
  void (APIENTRY *PopAttrib)(void);
  void (APIENTRY *PushClientAttrib)(GLbitfield);
  void (APIENTRY *PopClientAttrib)(void);
  GLint (APIENTRY *RenderMode)(GLenum);
  GLenum (APIENTRY *GetError)(void);
  const GLubyte* (APIENTRY *GetString)(GLenum);
  void (APIENTRY *Finish)(void);
  void (APIENTRY *Flush)(void);
  void (APIENTRY *Hint)(GLenum, GLenum);
  void (APIENTRY *ClearDepth)(GLclampd);
  void (APIENTRY *DepthFunc)(GLenum);
  void (APIENTRY *DepthMask)(GLboolean);
  void (APIENTRY *DepthRange)(GLclampd, GLclampd);
  void (APIENTRY *ClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Accum)(GLenum, GLfloat);
  void (APIENTRY *MatrixMode)(GLenum);
  void (APIENTRY *Ortho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Frustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Viewport)(GLint, GLint, GLsizei, GLsizei);
  void (APIENTRY *PushMatrix)(void);
  void (APIENTRY *PopMatrix)(void);
  void (APIENTRY *LoadIdentity)(void);
  void (APIENTRY *LoadMatrixd)(const GLdouble*);
  void (APIENTRY *LoadMatrixf)(const GLfloat*);
  void (APIENTRY *MultMatrixd)(const GLdouble*);
  void (APIENTRY *MultMatrixf)(const GLfloat*);
  void (APIENTRY *Rotated)(GLdouble, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Rotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Scaled)(GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Scalef)(GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Translated)(GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Translatef)(GLfloat, GLfloat, GLfloat);
  GLboolean (APIENTRY *IsList)(GLuint);
  void (APIENTRY *DeleteLists)(GLuint, GLsizei);
  GLuint (APIENTRY *GenLists)(GLsizei);
  void (APIENTRY *NewList)(GLuint, GLenum);
  void (APIENTRY *EndList)(void);
  void (APIENTRY *CallList)(GLuint);
  void (APIENTRY *CallLists)(GLsizei, GLenum, const GLvoid*);
  void (APIENTRY *ListBase)(GLuint);
  void (APIENTRY *Begin)(GLenum);
  void (APIENTRY *End)(void);
  void (APIENTRY *Vertex2d)(GLdouble, GLdouble);
  void (APIENTRY *Vertex2f)(GLfloat, GLfloat);
  void (APIENTRY *Vertex2i)(GLint, GLint);
  void (APIENTRY *Vertex2s)(GLshort, GLshort);
  void (APIENTRY *Vertex3d)(GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Vertex3f)(GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Vertex3i)(GLint, GLint, GLint);
  void (APIENTRY *Vertex3s)(GLshort, GLshort, GLshort);
  void (APIENTRY *Vertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
  void (APIENTRY *Vertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
  void (APIENTRY *Vertex4i)(GLint, GLint, GLint, GLint);
  void (APIENTRY *Vertex4s)(GLshort, GLshort, GLshort, GLshort);
  void (APIENTRY *Vertex2dv)(const GLdouble*);
  void (APIENTRY *Vertex2fv)(const GLfloat*);
  void (APIENTRY *Vertex2iv)(const GLint*);
  void (APIENTRY *Vertex2sv)(const GLshort*);
  void (APIENTRY *Vertex3dv)(const GLdouble*);
	void (APIENTRY *Vertex3fv)(const GLfloat*);
	void (APIENTRY *Vertex3iv)(const GLint*);
	void (APIENTRY *Vertex3sv)(const GLshort*);
	void (APIENTRY *Vertex4dv)(const GLdouble*);
	void (APIENTRY *Vertex4fv)(const GLfloat*);
	void (APIENTRY *Vertex4iv)(const GLint*);
	void (APIENTRY *Vertex4sv)(const GLshort*);
	void (APIENTRY *Normal3b)(GLbyte, GLbyte, GLbyte);
	void (APIENTRY *Normal3d)(GLdouble, GLdouble, GLdouble);
	void (APIENTRY *Normal3f)(GLfloat, GLfloat, GLfloat);
	void (APIENTRY *Normal3i)(GLint, GLint, GLint);
	void (APIENTRY *Normal3s)(GLshort, GLshort, GLshort);
	void (APIENTRY *Normal3bv)(const GLbyte*);
	void (APIENTRY *Normal3dv)(const GLdouble*);
	void (APIENTRY *Normal3fv)(const GLfloat*);
	void (APIENTRY *Normal3iv)(const GLint*);
	void (APIENTRY *Normal3sv)(const GLshort*);
	void (APIENTRY *Indexd)(GLdouble);
	void (APIENTRY *Indexf)(GLfloat);
	void (APIENTRY *Indexi)(GLint);
	void (APIENTRY *Indexs)(GLshort);
	void (APIENTRY *Indexub)(GLubyte);
	void (APIENTRY *Indexdv)(const GLdouble*);
	void (APIENTRY *Indexfv)(const GLfloat*);
	void (APIENTRY *Indexiv)(const GLint*);
	void (APIENTRY *Indexsv)(const GLshort*);
	void (APIENTRY *Indexubv)(const GLubyte*);
	void (APIENTRY *Color3b)(GLbyte, GLbyte, GLbyte);
	void (APIENTRY *Color3d)(GLdouble, GLdouble, GLdouble);
	void (APIENTRY *Color3f)(GLfloat, GLfloat, GLfloat);
	void (APIENTRY *Color3i)(GLint, GLint, GLint);
	void (APIENTRY *Color3s)(GLshort, GLshort, GLshort);
	void (APIENTRY *Color3ub)(GLubyte, GLubyte, GLubyte);
	void (APIENTRY *Color3ui)(GLuint, GLuint, GLuint);
	void (APIENTRY *Color3us)(GLushort, GLushort, GLushort);
	void (APIENTRY *Color4b)(GLbyte, GLbyte, GLbyte, GLbyte);
	void (APIENTRY *Color4d)(GLdouble, GLdouble, GLdouble, GLdouble);
	void (APIENTRY *Color4f)(GLfloat, GLfloat, GLfloat, GLfloat);
	void (APIENTRY *Color4i)(GLint, GLint, GLint, GLint);
	void (APIENTRY *Color4s)(GLshort, GLshort, GLshort, GLshort);
	void (APIENTRY *Color4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
	void (APIENTRY *Color4ui)(GLuint, GLuint, GLuint, GLuint);
	void (APIENTRY *Color4us)(GLushort, GLushort, GLushort, GLushort);
	void (APIENTRY *Color3bv)(const GLbyte*);
	void (APIENTRY *Color3dv)(const GLdouble*);
	void (APIENTRY *Color3fv)(const GLfloat*);
	void (APIENTRY *Color3iv)(const GLint*);
	void (APIENTRY *Color3sv)(const GLshort*);
	void (APIENTRY *Color3ubv)(const GLubyte*);
	void (APIENTRY *Color3uiv)(const GLuint*);
	void (APIENTRY *Color3usv)(const GLushort*);
	void (APIENTRY *Color4bv)(const GLbyte*);
	void (APIENTRY *Color4dv)(const GLdouble*);
	void (APIENTRY *Color4fv)(const GLfloat*);
	void (APIENTRY *Color4iv)(const GLint*);
	void (APIENTRY *Color4sv)(const GLshort*);
	void (APIENTRY *Color4ubv)(const GLubyte*);
	void (APIENTRY *Color4uiv)(const GLuint*);
	void (APIENTRY *Color4usv)(const GLushort*);
	void (APIENTRY *TexCoord1d)(GLdouble);
	void (APIENTRY *TexCoord1f)(GLfloat);
	void (APIENTRY *TexCoord1i)(GLint);
	void (APIENTRY *TexCoord1s)(GLshort);
	void (APIENTRY *TexCoord2d)(GLdouble, GLdouble);
	void (APIENTRY *TexCoord2f)(GLfloat, GLfloat);
	void (APIENTRY *TexCoord2i)(GLint, GLint);
	void (APIENTRY *TexCoord2s)(GLshort, GLshort);
	void (APIENTRY *TexCoord3d)(GLdouble, GLdouble, GLdouble);
	void (APIENTRY *TexCoord3f)(GLfloat, GLfloat, GLfloat);
	void (APIENTRY *TexCoord3i)(GLint, GLint, GLint);
	void (APIENTRY *TexCoord3s)(GLshort, GLshort, GLshort);
	void (APIENTRY *TexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
	void (APIENTRY *TexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
	void (APIENTRY *TexCoord4i)(GLint, GLint, GLint, GLint);
	void (APIENTRY *TexCoord4s)(GLshort, GLshort, GLshort, GLshort);
	void (APIENTRY *TexCoord1dv)(const GLdouble*);
	void (APIENTRY *TexCoord1fv)(const GLfloat*);
	void (APIENTRY *TexCoord1iv)(const GLint*);
	void (APIENTRY *TexCoord1sv)(const GLshort*);
	void (APIENTRY *TexCoord2dv)(const GLdouble*);
	void (APIENTRY *TexCoord2fv)(const GLfloat*);
	void (APIENTRY *TexCoord2iv)(const GLint*);
	void (APIENTRY *TexCoord2sv)(const GLshort*);
	void (APIENTRY *TexCoord3dv)(const GLdouble*);
	void (APIENTRY *TexCoord3fv)(const GLfloat*);
	void (APIENTRY *TexCoord3iv)(const GLint*);
	void (APIENTRY *TexCoord3sv)(const GLshort*);
	void (APIENTRY *TexCoord4dv)(const GLdouble*);
	void (APIENTRY *TexCoord4fv)(const GLfloat*);
	void (APIENTRY *TexCoord4iv)(const GLint*);
	void (APIENTRY *TexCoord4sv)(const GLshort*);
	void (APIENTRY *RasterPos2d)(GLdouble, GLdouble);
	void (APIENTRY *RasterPos2f)(GLfloat, GLfloat);
	void (APIENTRY *RasterPos2i)(GLint, GLint);
	void (APIENTRY *RasterPos2s)(GLshort, GLshort);
	void (APIENTRY *RasterPos3d)(GLdouble, GLdouble, GLdouble);
	void (APIENTRY *RasterPos3f)(GLfloat, GLfloat, GLfloat);
	void (APIENTRY *RasterPos3i)(GLint, GLint, GLint);
	void (APIENTRY *RasterPos3s)(GLshort, GLshort, GLshort);
	void (APIENTRY *RasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
	void (APIENTRY *RasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
	void (APIENTRY *RasterPos4i)(GLint, GLint, GLint, GLint);
	void (APIENTRY *RasterPos4s)(GLshort, GLshort, GLshort, GLshort);
	void (APIENTRY *RasterPos2dv)(const GLdouble*);
	void (APIENTRY *RasterPos2fv)(const GLfloat*);
	void (APIENTRY *RasterPos2iv)(const GLint*);
	void (APIENTRY *RasterPos2sv)(const GLshort*);
	void (APIENTRY *RasterPos3dv)(const GLdouble*);
	void (APIENTRY *RasterPos3fv)(const GLfloat*);
	void (APIENTRY *RasterPos3iv)(const GLint*);
	void (APIENTRY *RasterPos3sv)(const GLshort*);
	void (APIENTRY *RasterPos4dv)(const GLdouble*);
	void (APIENTRY *RasterPos4fv)(const GLfloat*);
	void (APIENTRY *RasterPos4iv)(const GLint*);
	void (APIENTRY *RasterPos4sv)(const GLshort*);
	void (APIENTRY *Rectd)(GLdouble, GLdouble, GLdouble, GLdouble);
	void (APIENTRY *Rectf)(GLfloat, GLfloat, GLfloat, GLfloat);
	void (APIENTRY *Recti)(GLint, GLint, GLint, GLint);
	void (APIENTRY *Rects)(GLshort, GLshort, GLshort, GLshort);
	void (APIENTRY *Rectdv)(const GLdouble*, const GLdouble*);
	void (APIENTRY *Rectfv)(const GLfloat*, const GLfloat*);
	void (APIENTRY *Rectiv)(const GLint*, const GLint*);
	void (APIENTRY *Rectsv)(const GLshort*, const GLshort*);
	void (APIENTRY *VertexPointer)(GLint, GLenum, GLsizei, const GLvoid*);
	void (APIENTRY *NormalPointer)(GLenum, GLsizei, const GLvoid*);
	void (APIENTRY *ColorPointer)(GLint, GLenum, GLsizei, const GLvoid*);
	void (APIENTRY *IndexPointer)(GLenum, GLsizei, const GLvoid*);
	void (APIENTRY *TexCoordPointer)(GLint, GLenum, GLsizei, const GLvoid*);
	void (APIENTRY *EdgeFlagPointer)(GLsizei, const GLvoid*);
	void (APIENTRY *GetPointerv)(GLenum, GLvoid**);
	void (APIENTRY *ArrayElement)(GLint);
	void (APIENTRY *DrawArrays)(GLenum, GLint, GLsizei);
	void (APIENTRY *DrawElements)(GLenum, GLsizei, GLenum, const GLvoid*);
	void (APIENTRY *ShadeModel)(GLenum);
	void (APIENTRY *Lightf)(GLenum, GLenum, GLfloat);
	void (APIENTRY *Lighti)(GLenum, GLenum, GLint);
	void (APIENTRY *Lightfv)(GLenum, GLenum, const GLfloat*);
	void (APIENTRY *Lightiv)(GLenum, GLenum, const GLint*);
	void (APIENTRY *GetLightfv)(GLenum, GLenum, GLfloat*);
	void (APIENTRY *GetLightiv)(GLenum, GLenum, GLint*);
	void (APIENTRY *LightModelf)(GLenum, GLfloat);
	void (APIENTRY *LightModeli)(GLenum, GLint);
	void (APIENTRY *LightModelfv)(GLenum, const GLfloat*);
	void (APIENTRY *LightModeliv)(GLenum, const GLint*);
	void (APIENTRY *Materialf)(GLenum, GLenum, GLfloat);
	void (APIENTRY *Materiali)(GLenum, GLenum, GLint);
	void (APIENTRY *Materialfv)(GLenum, GLenum, const GLfloat*);
	void (APIENTRY *Materialiv)(GLenum, GLenum, const GLint*);
	void (APIENTRY *GetMaterialfv)(GLenum, GLenum, GLfloat*);
	void (APIENTRY *GetMaterialiv)(GLenum, GLenum, GLint*);
	void (APIENTRY *ColorMaterial)(GLenum, GLenum);
	void (APIENTRY *PixelZoom)(GLfloat, GLfloat);
	void (APIENTRY *PixelStoref)(GLenum, GLfloat);
	void (APIENTRY *PixelStorei)(GLenum, GLint);
	void (APIENTRY *PixelTransferf)(GLenum, GLfloat);
	void (APIENTRY *PixelTransferi)(GLenum, GLint);
	void (APIENTRY *PixelMapfv)(GLenum, GLsizei, const GLfloat*);
	void (APIENTRY *PixelMapuiv)(GLenum, GLsizei, const GLuint*);
	void (APIENTRY *PixelMapusv)(GLenum, GLsizei, const GLushort*);
	void (APIENTRY *GetPixelMapfv)(GLenum, GLfloat*);
	void (APIENTRY *GetPixelMapuiv)(GLenum, GLuint*);
	void (APIENTRY *GetPixelMapusv)(GLenum, GLushort*);
	void (APIENTRY *Bitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte*);
	void (APIENTRY *ReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*);
	void (APIENTRY *DrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const GLvoid*);
	void (APIENTRY *CopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
	void (APIENTRY *StencilFunc)(GLenum, GLint, GLuint);
	void (APIENTRY *StencilMask)(GLuint);
	void (APIENTRY *StencilOp)(GLenum, GLenum, GLenum);
	void (APIENTRY *ClearStencil)(GLint);
	void (APIENTRY *TexGend)(GLenum, GLenum, GLdouble);
	void (APIENTRY *TexGenf)(GLenum, GLenum, GLfloat);
	void (APIENTRY *TexGeni)(GLenum, GLenum, GLint);
	void (APIENTRY *TexGendv)(GLenum, GLenum, const GLdouble*);
	void (APIENTRY *TexGenfv)(GLenum, GLenum, const GLfloat*);
	void (APIENTRY *TexGeniv)(GLenum, GLenum, const GLint*);
	void (APIENTRY *GetTexGendv)(GLenum, GLenum, GLdouble*);
	void (APIENTRY *GetTexGenfv)(GLenum, GLenum, GLfloat*);
	void (APIENTRY *GetTexGeniv)(GLenum, GLenum, GLint*);
	void (APIENTRY *TexEnvf)(GLenum, GLenum, GLfloat);
	void (APIENTRY *TexEnvi)(GLenum, GLenum, GLint);
	void (APIENTRY *TexEnvfv)(GLenum, GLenum, const GLfloat*);
	void (APIENTRY *TexEnviv)(GLenum, GLenum, const GLint*);
	void (APIENTRY *GetTexEnvfv)(GLenum, GLenum, GLfloat*);
	void (APIENTRY *GetTexEnviv)(GLenum, GLenum, GLint*);
	void (APIENTRY *TexParameterf)(GLenum, GLenum, GLfloat);
	void (APIENTRY *TexParameteri)(GLenum, GLenum, GLint);
	void (APIENTRY *TexParameterfv)(GLenum, GLenum, const GLfloat*);
	void (APIENTRY *TexParameteriv)(GLenum, GLenum, const GLint*);
	void (APIENTRY *GetTexParameterfv)(GLenum, GLenum, GLfloat*);
	void (APIENTRY *GetTexParameteriv)(GLenum, GLenum, GLint*);
	void (APIENTRY *GetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat*);
	void (APIENTRY *GetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint*);
	void (APIENTRY *TexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid*);
	void (APIENTRY *TexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid*);
	void (APIENTRY *GetTexImage)(GLenum, GLint, GLenum, GLenum, GLvoid*);
	void (APIENTRY *GenTextures)(GLsizei, GLuint*);
	void (APIENTRY *DeleteTextures)(GLsizei, const GLuint*);
	void (APIENTRY *BindTexture)(GLenum, GLuint);
	void (APIENTRY *PrioritizeTextures)(GLsizei, const GLuint*, const GLclampf*);
	GLboolean (APIENTRY *AreTexturesResident)(GLsizei, const GLuint*, GLboolean*);
	GLboolean (APIENTRY *IsTexture)(GLuint);
	void (APIENTRY *TexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid*);
	void (APIENTRY *TexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*);
	void (APIENTRY *CopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
	void (APIENTRY *CopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
	void (APIENTRY *CopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
	void (APIENTRY *CopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
	void (APIENTRY *Map1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble*);
	void (APIENTRY *Map1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat*);
	void (APIENTRY *Map2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble*);
	void (APIENTRY *Map2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat*);
	void (APIENTRY *GetMapdv)(GLenum, GLenum, GLdouble*);
	void (APIENTRY *GetMapfv)(GLenum, GLenum, GLfloat*);
	void (APIENTRY *GetMapiv)(GLenum, GLenum, GLint*);
	void (APIENTRY *EvalCoord1d)(GLdouble);
	void (APIENTRY *EvalCoord1f)(GLfloat);
	void (APIENTRY *EvalCoord1dv)(const GLdouble*);
	void (APIENTRY *EvalCoord1fv)(const GLfloat*);
	void (APIENTRY *EvalCoord2d)(GLdouble, GLdouble);
	void (APIENTRY *EvalCoord2f)(GLfloat, GLfloat);
	void (APIENTRY *EvalCoord2dv)(const GLdouble*);
	void (APIENTRY *EvalCoord2fv)(const GLfloat*);
	void (APIENTRY *MapGrid1d)(GLint, GLdouble, GLdouble);
	void (APIENTRY *MapGrid1f)(GLint, GLfloat, GLfloat);
	void (APIENTRY *MapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
	void (APIENTRY *MapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
	void (APIENTRY *EvalPoint1)(GLint);
	void (APIENTRY *EvalPoint2)(GLint, GLint);
	void (APIENTRY *EvalMesh1)(GLenum, GLint, GLint);
	void (APIENTRY *EvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
	void (APIENTRY *Fogf)(GLenum, GLfloat);
	void (APIENTRY *Fogi)(GLenum, GLint);
	void (APIENTRY *Fogfv)(GLenum, const GLfloat*);
	void (APIENTRY *Fogiv)(GLenum, const GLint*);
	void (APIENTRY *FeedbackBuffer)(GLsizei, GLenum, GLfloat*);
	void (APIENTRY *PassThrough)(GLfloat);
	void (APIENTRY *SelectBuffer)(GLsizei, GLuint*);
	void (APIENTRY *InitNames)(void);
	void (APIENTRY *LoadName)(GLuint);
	void (APIENTRY *PushName)(GLuint);
	void (APIENTRY *PopName)(void);
};


}}

#endif

